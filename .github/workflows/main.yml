name: Node.js CI

on: [push]

jobs:
  test-node:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - name: Run test with Node.js ${{ matrix.node-version }}
      run: npm run test-node
  test-karma:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - name: Run karma tests
      run: npm run test-karma
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - name: Run eslint
      run: npm run lint
  coverage:
#    needs: [test-node, test-karma]
    needs: [test-node]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - name: Generate coverage report
      run: npm run coverage-ci
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      if: ${{ false }} # MATTR disable upload step
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: true
  check-bundle-output:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
    - run: npm install
    - run: npm run build
    - name: Check bundle output
      run: |
        if  [[ "$(git ls-files -m)" != "" ]]; then
          echo "::error::Please build and commit these files:"
          git ls-files -m
          exit 1
        fi
